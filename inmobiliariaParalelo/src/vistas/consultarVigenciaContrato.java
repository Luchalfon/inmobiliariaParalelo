/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import Entidades.Contrato;
import accesoADatos.ContratoData;
import java.sql.Date;
import java.time.LocalDate;
import javax.swing.table.DefaultTableModel;
import java.util.*;
/**
 *
 * @author USER
 */
public class consultarVigenciaContrato extends javax.swing.JInternalFrame {

     private DefaultTableModel modelo = new DefaultTableModel();
    /**
     * Creates new form consultarVigenciaContrato
     */
    public consultarVigenciaContrato() {
        initComponents();
        armarCabecera();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVigencia = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        tablaVigencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaVigencia);

        jLabel1.setText("CONSULTA VIGENCIA DE CONTRATOS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaVigencia;
    // End of variables declaration//GEN-END:variables

private void armarCabecera() {
           
        modelo.addColumn("Id Contrato");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo Propiedad");
        modelo.addColumn("Direccion");
        modelo.addColumn("Fecha inicio");
        modelo.addColumn("Fecha final");
        modelo.addColumn("Vigencia");
        modelo.addColumn("Dias");
       tablaVigencia.setModel(modelo);
    }

    private void llenarTabla() {
        ContratoData conData = new ContratoData();
        // Date dateHoy = Date.valueOf(LocalDate.now());
        java.util.Date fechaactual = new java.util.Date(System.currentTimeMillis());
        
         int dias;
         int milisecondsByDay = 86400000;
        for (Contrato contr : conData.listarContratosVigentes()) {
            modelo.addRow(new Object[]{contr.getId_contrato(),
                                        contr.getInquilino().getApellido(),
                                         contr.getInquilino().getNombre(),
                                         contr.getPropiedad().getTipoPropiedad(),
                                         contr.getPropiedad().getDireccion(),
                                         contr.getFecha_Inicio(),
                                         contr.getFecha_Final(),
                                         contr.getVigencia(),
                                         dias= (int) ((( contr.getFecha_Final().getTime() - fechaactual.getTime()) / milisecondsByDay) + 1)
                                         });

        }

    }

}
